@page "/"
@using PdfConverterShare.Models
@using PdfConverterApp.Services
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime
@inject IPdfConverterService ConverterService
@inject ILogger<Home> Logger

<PageTitle>PDF変換アプリ</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <h1 class="text-center mb-4">
                <i class="bi bi-file-earmark-pdf"></i>
                PDF変換アプリ
            </h1>

            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="bi bi-gear"></i>
                        PDFファイル変換
                    </h4>
                </div>
                <div class="card-body">
                    <EditForm Model="@formModel" OnValidSubmit="@SendToApiAsync">
                        <DataAnnotationsValidator />

                        @* *@
                        <div class="mb-3">
                            <label for="fileInput" class="form-label fw-bold">
                                <i class="bi bi-upload"></i>
                                PDFファイル選択 <span class="text-danger">*</span>
                            </label>
                            <InputFile id="fileInput"
                                       @key="@inputFileKey"
                                       OnChange="@OnFileSelectedAsync"
                                       accept=".pdf"
                                       class="form-control"
                                       disabled="@isProcessing" />
                            <div class="form-text">
                                PDF形式のファイルを選択してください（最大10MB）
                            </div>
                            @if (!string.IsNullOrEmpty(selectedFileName))
                            {
                                <div class="mt-2 d-flex align-items-center">
                                    <span class="badge bg-success">
                                        <i class="bi bi-check-circle"></i>
                                        選択済み: @selectedFileName
                                    </span>
                                    <button type="button" class="btn btn-sm btn-outline-danger ms-2" @onclick="ClearSelectedFile">
                                        <i class="bi bi-x-circle"></i> クリア
                                    </button>
                                </div>
                            }
                        </div>

                        <div class="mb-3">
                            <label for="viewPassword" class="form-label fw-bold">
                                <i class="bi bi-eye"></i>
                                参照用パスワード <span class="text-danger">*</span>
                            </label>
                            <InputText id="viewPassword" class="form-control" type="password"
                                    @bind-Value="formModel.ViewPassword" @oninput="OnPasswordInput" 
                                    disabled="@isProcessing" placeholder="参照用パスワード" />

                        </div>

                        @* *@
                        <div class="d-grid">
                            <button type="submit"
                                    class="btn btn-primary btn-lg"
                                    disabled="@(!CanSubmit())">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>変換処理中...</span>
                                }
                                else
                                {
                                    <i class="bi bi-play-circle"></i>
                                    <span>変換実行</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    @* *@
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3" role="alert">
                            <i class="bi bi-exclamation-triangle"></i>
                            <strong>エラー:</strong> @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3" role="alert">
                            <i class="bi bi-check-circle"></i>
                            <strong>成功:</strong> @successMessage
                        </div>
                    }
                </div>
            </div>

            @* *@
            <div class="mt-3 text-center">
                <small class="text-muted">
                    API接続状態:
                    @if (apiHealthStatus.HasValue)
                    {
                        @if (apiHealthStatus.Value)
                        {
                            <span class="text-success">
                                <i class="bi bi-circle-fill"></i> 正常
                            </span>
                        }
                        else
                        {
                            <span class="text-danger">
                                <i class="bi bi-circle-fill"></i> 接続エラー
                            </span>
                        }
                    }
                    else
                    {
                        <span class="text-warning">
                            <i class="bi bi-circle-fill"></i> 確認中...
                        </span>
                    }
                </small>
            </div>
        </div>
    </div>
</div>

@code {
    private FormModel formModel = new();
    private string selectedFileName = string.Empty;
    private byte[]? selectedFileData = null;
    private bool isProcessing = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool? apiHealthStatus = null;
    private object inputFileKey = new();

    private const int MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB

    public class FormModel
    {
        public string UserId { get; set; } = string.Empty;
        [Required(ErrorMessage = "参照用パスワードを入力してください")]
        public string ViewPassword { get; set; } = string.Empty;
        public string EditPassword { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        formModel.UserId = "defaultUser";
        formModel.EditPassword = formModel.ViewPassword;
        await CheckApiHealthAsync();
    }

    private async Task CheckApiHealthAsync()
    {
        try
        {
            apiHealthStatus = await ConverterService.CheckApiHealthAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "API接続確認エラー");
            apiHealthStatus = false;
        }
    }

    private async Task OnFileSelectedAsync(InputFileChangeEventArgs e)
    {
        ClearMessages();
        try
        {
            var file = e.File;
            if (file.Size > MAX_FILE_SIZE) { /* ... */ return; }
            if (!file.ContentType.Equals("application/pdf", StringComparison.OrdinalIgnoreCase)) { /* ... */ return; }
            using var stream = file.OpenReadStream(MAX_FILE_SIZE);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            selectedFileName = file.Name;
            selectedFileData = memoryStream.ToArray();
            Logger.LogInformation("ファイル選択完了: {FileName}", selectedFileName);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "ファイル選択エラー");
            errorMessage = $"ファイル読み込みエラー: {ex.Message}";
        }
    }

    private void ClearSelectedFile()
    {
        selectedFileName = string.Empty;
        selectedFileData = null;
        inputFileKey = new object();
        ClearMessages();
        Logger.LogInformation("ファイル選択がクリアされました。");
    }

    private async Task SendToApiAsync()
    {
        var validationContext = new ValidationContext(formModel);
        var validationResults = new List<ValidationResult>();
        if (!Validator.TryValidateObject(formModel, validationContext, validationResults, true))
        {
            errorMessage = string.Join(" ", validationResults.Select(r => r.ErrorMessage));
            return;
        }
        if (!CanSubmit()) return;

        isProcessing = true;
        ClearMessages();
        try
        {
            var request = new ConvertRequest
            {
                UserId = formModel.UserId.Trim(),
                FileName = selectedFileName,
                ViewPassword = formModel.ViewPassword.Trim(),
                EditPassword = string.IsNullOrWhiteSpace(formModel.EditPassword) ? formModel.ViewPassword.Trim() : formModel.EditPassword.Trim(),
                FileData = selectedFileData!
            };
            var response = await ConverterService.ConvertPdfAsync(request);
            if (response?.FileData != null && response.FileData.Length > 0)
            {
                await DownloadFileAsync(response.FileName, response.FileData);
                successMessage = $"変換完了！ファイル「{response.FileName}」をダウンロードしました。";
            }
            else
            {
                errorMessage = "APIからの応答データが無効です。";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"エラーが発生しました: {ex.Message}";
            Logger.LogError(ex, "エラー");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private bool CanSubmit()
    {
        return !isProcessing
               && selectedFileData != null
               && !string.IsNullOrWhiteSpace(formModel.ViewPassword);
    }

    private async Task DownloadFileAsync(string fileName, byte[] fileData)
    {
        try
        {
            var base64Data = Convert.ToBase64String(fileData);
            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64", base64Data, fileName, "application/pdf");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "ファイルダウンロードエラー");
            errorMessage = $"ファイルダウンロードエラー: {ex.Message}";
        }
    }

    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private void OnPasswordInput(ChangeEventArgs e)
    {
        formModel.ViewPassword = e.Value?.ToString() ?? string.Empty;
    }
}